# -*- coding: utf-8 -*-
"""Copy of FinalFunctionality.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xPvyDXYp28-vrsEJRxT55JTGjxSVHiHc

## Basic import and intialisations
"""

import json
import requests
import webbrowser
import base64
import pandas as pd
import os
  
MAIN_PATH = os.getcwd()

client_id = 'D11475FD8E774BD5852416175C793774'
client_secret = 'a1_hYGOtI086OiSzeMr7hbsbm35sau4IQJOzsteBVQIUZnoS'
redirect_url = 'https://www.phm-accountants.co.uk/'
scope = 'offline_access openid accounting.settings accounting.transactions accounting.reports.read accounting.journals.read'
#scope = 'offline_access accounting.transactions'
b64_id_secret = base64.b64encode(bytes(client_id + ':' + client_secret, 'utf-8')).decode('utf-8')

"""## Standard Auth Functions

"""

def XeroFirstAuth():
    # 1. Send a user to authorize your app
    auth_url = ('''https://login.xero.com/identity/connect/authorize?''' +
                '''response_type=code''' +
                '''&client_id=''' + client_id +
                '''&redirect_uri=''' + redirect_url +
                '''&scope=''' + scope +
                '''&state=123''')

    webbrowser.open_new(auth_url)
    #webbrowser.get(chrome_path).open(auth_url)
    #print('@@@@@@@@@@@@@@@@@')
    #print(webbrowser.get(chrome_path),'jajaja')
    #print('@@@@@@@@@@@@@@@@@')

    # 2. Users are redirected back to you with a code
    auth_res_url = input('What is the response URL? ')
    start_number = auth_res_url.find('code=') + len('code=')
    end_number = auth_res_url.find('&scope')
    auth_code = auth_res_url[start_number:end_number]
    print(auth_code)
    print('\n')



    # 3. Exchange the code
    exchange_code_url = 'https://identity.xero.com/connect/token'
    response = requests.post(exchange_code_url,
                            headers = {
                                'Authorization': 'Basic ' + b64_id_secret
                            },
                            data = {
                                'grant_type': 'authorization_code',
                                'code': auth_code,
                                'redirect_uri': redirect_url
                            })
    json_response = response.json()
    print(json_response)
    print('\n')

    # 4. Receive your tokens
    return [json_response['access_token'], json_response['refresh_token']]

def XeroTenants(access_token):
    connections_url = 'https://api.xero.com/connections'
    response = requests.get(connections_url,
                           headers = {
                               'Authorization': 'Bearer ' + access_token,
                               'Content-Type': 'application/json'
                           })
    json_response = response.json()
    print(json_response)
    print("That was The Tenant Function")

    tenant_dict = {}

    for organisation_no in range(len(json_response)):
      #print(f"{organisation_no} :: {json_response[organisation_no]['tenantId']} :: {json_response[organisation_no]['tenantName']}")
      tenant_dict[json_response[organisation_no]['tenantName'].lower()] = json_response[organisation_no]['tenantId']
    return tenant_dict

def XeroRefreshToken(refresh_token):
    token_refresh_url = 'https://identity.xero.com/connect/token'
    response = requests.post(token_refresh_url,
                            headers = {
                                'Authorization' : 'Basic ' + b64_id_secret,
                                'Content-Type': 'application/x-www-form-urlencoded'
                            },
                            data = {
                                'grant_type' : 'refresh_token',
                                'refresh_token' : refresh_token
                            })
    json_response = response.json()
    print(json_response)

    new_refresh_token = json_response['refresh_token']
    #rt_file = open('E:/Jaz/Folder/refresh_token.txt', 'w')
    rt_file = open(os.path.join(MAIN_PATH,'pythonCollection','refresh_token.txt'), 'w')
    rt_file.write(new_refresh_token)
    rt_file.close()

    return [json_response['access_token'], json_response['refresh_token']]

"""## Specailsed Account Codes Functions"""

def XeroAccountCodesRequest(ACC_TOKEN,xero_tenant_id):

    get_url = 'https://api.xero.com/api.xro/2.0/Accounts'
    response = requests.get(get_url,
                           headers = {
                               'Authorization': 'Bearer ' + ACC_TOKEN,
                               'Xero-tenant-id': xero_tenant_id,
                               'Accept': 'application/json'
                           })
    json_response = response.json()
    print(json_response)

    #xero_output = open('E:/Jaz/Folder/xero_output_account_codes.txt', 'w')
    xero_output = open(os.path.join(MAIN_PATH,'pythonCollection','xero_output_account_codes.txt'), 'w')
    xero_output.write(response.text)
    xero_output.close()

def AccountCodeFiler():
  #open the files to read about the dictinary
  #with open('E:/Jaz/Folder/xero_output_account_codes.txt','r') as accFile:
  with open(os.path.join(MAIN_PATH,'pythonCollection','xero_output_account_codes.txt'),'r') as accFile:

    content = accFile.read()

  format = json.loads(content)
  #make Account codes dictionary
  acc_codes = {}
  for i in format['Accounts']:
    print(f"{i.get('Code')} :: {i.get('Name')}")
    acc_codes[i.get('Code')] = i.get('Name')
  #Export the codes out a csv
  df = pd.DataFrame({'Codes': acc_codes.keys(),
                   'Name':acc_codes.values()})
  #df.to_csv('E:/Jaz/Folder/xero_output_account_codes.csv',index=False)
  df.to_csv(os.path.join(MAIN_PATH,'pythonCollection','xero_output_account_codes.csv'),index=False)

"""## Specialised Invoices Functions

## Specialised Bank Transaction functions
"""

def jsonToInvoiceDF(r_inv):

  def checker(dat):
    if type(dat) != type(None):
      return dat.split('T')[0]
    else:
      return 'NONE'

  dictionary = {
      'AccountCode':[],
      'Description':[],
      'SubTotal':[],
      'TotalTax':[],
      'TotalAmount':[],
      'Date':[],
      'DueDate':[],
      'Status':[],
      'Type':[],
      'CurrencyCode':[],
      'InvoiceID':[]
  }
  for i in r_inv:

    print(i['LineItems'][0].get('AccountCode'))
    print(i['LineItems'][0].get('Description'))
    print(i.get('SubTotal'))
    print(i.get('TotalTax'))
    print(i.get('Total'))
    print(i.get('DateString'))
    print(i.get('DueDateString'))
    print(i.get('Status'))
    print(i.get('Type'))
    print(i.get('CurrencyCode'))
    print(i.get('InvoiceID'))

    dictionary['AccountCode'].append(i['LineItems'][0].get('AccountCode'))
    dictionary['Description'].append(i['LineItems'][0].get('Description'))
    dictionary['SubTotal'].append(i.get('SubTotal'))
    dictionary['TotalTax'].append(i.get('TotalTax'))
    dictionary['TotalAmount'].append(i.get('Total'))
    dictionary['Date'].append(checker(i.get('DateString')))
    dictionary['DueDate'].append(checker(i.get('DueDateString')))
    dictionary['Status'].append(i.get('Status'))
    dictionary['Type'].append(i.get('Type'))
    dictionary['CurrencyCode'].append(i.get('CurrencyCode'))
    dictionary['InvoiceID'].append(i.get('InvoiceID'))

  df = pd.DataFrame(dictionary)
  #df.to_csv('E:\Jaz\Folder\invoice_new.csv',index=False)
  df.to_csv(os.path.join(MAIN_PATH,'pythonCollection','invoice_new.csv'),index=False)
  return df

def jsonToTransactionDF(r_trans):
  dictionary = {
      'AccountCode':[],
      'Description':[],
      'SubTotal':[],
      'TotalTax':[],
      'TotalAmount':[],
      'Date':[],
      'AccountID':[],
      'AccountName':[],
      'Type':[],
      'CurrencyCode':[],
      'Status':[],
      'TransactionID':[]
  }
  for i in r_trans:
    print(i['LineItems'][0].get('AccountCode'))
    print(i['LineItems'][0].get('Description'))
    print(i.get('SubTotal'))
    print(i.get('TotalTax'))
    print(i.get('Amount'))
    print(i.get('DateString'))
    print(i['BankAccount'].get('AccountID'))
    print(i['BankAccount'].get('Name'))
    print(i.get('Type'))
    print(i.get('CurrencyCode'))
    print(i.get('Status'))
    print(i.get('TransactionID'))

    dictionary['AccountCode'].append(i['LineItems'][0].get('AccountCode'))
    dictionary['Description'].append(i['LineItems'][0].get('Description'))
    dictionary['SubTotal'].append(i.get('SubTotal'))
    dictionary['TotalTax'].append(i.get('TotalTax'))
    dictionary['TotalAmount'].append(i.get('Total'))
    dictionary['Date'].append(i.get('DateString').split('T')[0])
    dictionary['AccountID'].append(i['BankAccount'].get('AccountID'))
    dictionary['AccountName'].append(i['BankAccount'].get('AccountName'))
    dictionary['Type'].append(i.get('Type'))
    dictionary['CurrencyCode'].append(i.get('CurrencyCode'))
    dictionary['Status'].append(i.get('Status'))
    dictionary['TransactionID'].append(i.get('BankTransactionID'))

  df = pd.DataFrame(dictionary)
  #df.to_csv(r'E:\Jaz\Folder\transaction_new.csv',index=False)
  df.to_csv(os.path.join(MAIN_PATH,'pythonCollection','transaction_new.csv'),index=False)
  return df

def jsonToOverpaymentDF(r_over):
  dictionary = {
      'AccountCode':[],
      'Description':[],
      'SubTotal':[],
      'TotalTax':[],
      'TotalAmount':[],
      'Date':[],
      'ContactName':[],
      'RemainingCredit':[],
      'CurrencyCode':[],
      'Status':[],
      'OverpaymentID':[]
  }
  for i in r_over:
    print(i['LineItems'][0].get('AccountCode'))
    print(i['LineItems'][0].get('Description'))
    print(i.get('SubTotal'))
    print(i.get('TotalTax'))
    print(i.get('Amount'))
    print(i.get('DateString'))
    print(i['Contact'].get('Name'))
    print(i.get('RemainingCredit'))
    print(i.get('CurrencyCode'))
    print(i.get('Status'))
    print(i.get('OverpaymentID'))

    dictionary['AccountCode'].append(i['LineItems'][0].get('AccountCode'))
    dictionary['Description'].append(i['LineItems'][0].get('Description'))
    dictionary['SubTotal'].append(i.get('SubTotal'))
    dictionary['TotalTax'].append(i.get('TotalTax'))
    dictionary['TotalAmount'].append(i.get('Total'))
    dictionary['Date'].append(i.get('DateString').split('T')[0])
    dictionary['ContactName'].append(i['Contact'].get('Name'))
    dictionary['RemainingCredit'].append(i.get('RemainingCredit'))
    dictionary['CurrencyCode'].append(i.get('CurrencyCode'))
    dictionary['Status'].append(i.get('Status'))
    dictionary['OverpaymentID'].append(i.get('OverpaymentID'))

  df = pd.DataFrame(dictionary)
  #df.to_csv(r'E:\Jaz\Folder\overpayment_new.csv',index=False)
  df.to_csv(os.path.join(MAIN_PATH,'pythonCollection','overpayment_new.csv'),index=False)
  return df

from datetime import datetime, timedelta
def time_fiddler(timestamp_with_offset):
    # Split the timestamp and timezone offset
    timestamp_str, offset_str = timestamp_with_offset.split('+')
    # Convert timestamp string to integer (milliseconds)
    timestamp = int(timestamp_str)
    # Convert milliseconds timestamp to seconds
    timestamp_seconds = timestamp / 1000
    # Convert to a datetime object in UTC
    utc_datetime = datetime.utcfromtimestamp(timestamp_seconds)
    # Parse the timezone offset
    offset_hours = int(offset_str[:2])
    offset_minutes = int(offset_str[2:])
    # Calculate the timedelta for the timezone offset
    offset_timedelta = timedelta(hours=offset_hours, minutes=offset_minutes)
    # Adjust the UTC datetime by the timezone offset
    local_datetime = utc_datetime + offset_timedelta
    # Format
    formatted_date = local_datetime.strftime("%Y-%m-%d")
    return formatted_date

def jsonToJournalDF(r_journ):
  dictionary = {
      'Date' : [],
      'Status' : [],
      'LineAmountType' : [],
      'Narration' : [],
      'AccountCode' : [],
      'LineAmount' : [],
      'Description' : [],
      'ManualJournalID' : []
  }
  for i in r_journ:
    print(i)
    for l in range(len(i['JournalLines'])):
      print(l)
      print(time_fiddler(i.get('Date').replace(')','(').split('(')[1]))
      print(i.get('Status'))
      print(i.get('LineAmountTypes'))
      print(i.get('Narration'))
      print(i['JournalLines'][l].get('AccountCode'))
      print(i['JournalLines'][l].get('LineAmount'))
      print(i['JournalLines'][l].get('Description'))
      print(i.get('ManualJournalID'))


      dictionary['Date'].append(time_fiddler(i.get('Date').replace(')','(').split('(')[1]))
      dictionary['Status'].append(i.get('Status'))
      dictionary['LineAmountType'].append(i.get('LineAmountTypes'))
      dictionary['Narration'].append(i.get('Narration'))
      dictionary['AccountCode'].append(i['JournalLines'][l].get('AccountCode'))
      dictionary['LineAmount'].append(i['JournalLines'][l].get('LineAmount'))
      dictionary['Description'].append(i['JournalLines'][l].get('Description'))
      dictionary['ManualJournalID'].append(i.get('ManualJournalID'))


  df = pd.DataFrame(dictionary)
  #df.to_csv(r'E:\Jaz\Folder\journal_new.csv',index=False)
  df.to_csv(os.path.join(MAIN_PATH,'pythonCollection','journal_new.csv'),index=False)
  return df

def jsonToPrepaymentDF(r_pre):

  dictionary = {
      'Type' : [],
      'ContactName' : [],
      'Date' : [],
      'RemainingCredit' : [],
      'AllocationAmount' : [],
      'AllocationDate' : [],
      'AllocationInvoiceNumber' : [],
      'Status' : [],
      'LineAmountTypes' : [],
      'Description' : [],
      'AccountCode' : [],
      'Subtotal' : [],
      'TotalTax' : [],
      'Total' : [],
      'PrepaymentID' : []
  }

  for i in r_pre:
    for j in range(len(i.get('Allocations'))):
      print(i.get('Type'))
      print(i['Contact'].get('Name'))
      print(time_fiddler(i.get('Date').replace(')','(').split('(')[1]))
      print(i.get('RemainingCredit'))
      print(i['Allocations'][j].get('Amount'))
      print(time_fiddler(i['Allocations'][j].get('Date').replace(')','(').split('(')[1]))
      print(i['Allocations'][j]['Invoice'].get('InvoiceNumber'))
      print(i.get('Status'))
      print(i.get('LineAmountTypes'))
      print(i['LineItems'][0].get('Description'))
      print(i['LineItems'][0].get('AccountCode'))
      print(i.get('SubTotal'))
      print(i.get('TotalTax'))
      print(i.get('Total'))
      print(i.get('PrepaymentID'))


      dictionary['Type'].append(i.get('Type'))
      dictionary['ContactName'].append(i['Contact'].get('Name'))
      dictionary['Date'].append(time_fiddler(i.get('Date').replace(')','(').split('(')[1]))
      dictionary['RemainingCredit'].append(i.get('RemainingCredit'))
      dictionary['AllocationAmount'].append(i['Allocations'][j].get('Amount'))
      dictionary['AllocationDate'].append(time_fiddler(i['Allocations'][j].get('Date').replace(')','(').split('(')[1]))
      dictionary['AllocationInvoiceNumber'].append(i['Allocations'][j]['Invoice'].get('InvoiceNumber'))
      dictionary['Status'].append(i.get('Status'))
      dictionary['LineAmountTypes'].append(i.get('LineAmountTypes'))
      dictionary['Description'].append(i['LineItems'][0].get('Description'))
      dictionary['AccountCode'].append(i['LineItems'][0].get('AccountCode'))
      dictionary['Subtotal'].append(i.get('SubTotal'))
      dictionary['TotalTax'].append(i.get('TotalTax'))
      dictionary['Total'].append(i.get('Total'))
      dictionary['PrepaymentID'].append(i.get('PrepaymentID'))

  print(dictionary)
  df = pd.DataFrame(dictionary)
  #df.to_csv(r'E:\Jaz\Folder\prepayment_new.csv',index=False)
  df.to_csv(os.path.join(MAIN_PATH,'pythonCollection','prepayment_new.csv'),index=False)
  return df

def jsonToPurchaseOrderDF(r_pord):

  def checker(dat):
    if type(dat) != type(None):
      return dat.split('T')[0]
    else:
      return 'NONE'

  dictionary = {
      'PurchaseOrderNumber' : [],
      'Date' : [],
      'DeliveryDate' : [],
      'DeliveryAddress' : [],
      'Reference' : [],
      'OrderType' : [],
      'Status' : [],
      'LineAmountTypes' : [],
      'Description' : [],
      'AccountCode' : [],
      'Subtotal' : [],
      'TotalTax' : [],
      'Total' : [],
      'PurchaseOrderID' : []
  }


  for i in r_pord:

    print(i.get('PurchaseOrderNumber'))
    print(time_fiddler(i.get('Date').replace(')','(').split('(')[1]))
    print(checker(i.get('DeliveryDateString')))
    print(i.get('DeliveryAddress'))
    print(i.get('Reference'))
    print(i.get('Type'))
    print(i.get('Status'))
    print(i.get('LineAmountTypes'))
    print(i['LineItems'][0].get('Description'))
    print(i['LineItems'][0].get('AccountCode'))
    print(i.get('SubTotal'))
    print(i.get('TotalTax'))
    print(i.get('Total'))
    print(i.get('PurchaseOrderID'))


    dictionary['PurchaseOrderNumber'].append(i.get('PurchaseOrderNumber'))
    dictionary['Date'].append(time_fiddler(i.get('Date').replace(')','(').split('(')[1]))
    dictionary['DeliveryDate'].append(checker(i.get('DeliveryDateString')))
    dictionary['DeliveryAddress'].append(i.get('DeliveryAddress'))
    dictionary['Reference'].append(i.get('Reference'))
    dictionary['OrderType'].append(i.get('Type'))
    dictionary['Status'].append(i.get('Status'))
    dictionary['LineAmountTypes'].append(i.get('LineAmountTypes'))
    dictionary['Description'].append(i['LineItems'][0].get('Description'))
    dictionary['AccountCode'].append(i['LineItems'][0].get('AccountCode'))
    dictionary['Subtotal'].append(i.get('SubTotal'))
    dictionary['TotalTax'].append(i.get('TotalTax'))
    dictionary['Total'].append(i.get('Total'))
    dictionary['PurchaseOrderID'].append(i.get('PurchaseOrderID'))

  print(dictionary)
  df = pd.DataFrame(dictionary)
  #df.to_csv(r'E:\Jaz\Folder\purchaseorder_new.csv',index=False)
  df.to_csv(os.path.join(MAIN_PATH,'pythonCollection','purchaseorder_new.csv'),index=False)
  return df

def jsonToCreditNoteDF(r_cred):

  def checker(dat):
    if type(dat) != type(None):
      return dat.split('T')[0]
    else:
      return 'NONE'

  dictionary = {
      'CreditNoteNumber' : [],
      'Type' : [],
      'RemainingCredit' : [],
      'ContactName' : [],
      'Date' : [],
      'Status' : [],
      'LineAmountTypes' : [],
      'Description' : [],
      'AccountCode' : [],
      'UnitAmount' : [],
      'Quantity' : [],
      'SubTotal' : [],
      'TotalTax' : [],
      'Total' : [],
      'CreditNoteID' : []
  }


  for i in r_cred:

    print(i.get('CreditNoteNumber'))
    print(i.get('Type'))
    print(i.get('RemainingCredit'))
    print(i.get('ContactName'))
    print(checker(i.get('DateString')))
    print(i.get('Status'))
    print(i.get('LineAmountTypes'))
    print(i['LineItems'][0].get('Description'))
    print(i['LineItems'][0].get('AccountCode'))
    print(i['LineItems'][0].get('UnitAmount'))
    print(i['LineItems'][0].get('Quantity'))
    print(i.get('SubTotal'))
    print(i.get('TotalTax'))
    print(i.get('Total'))
    print(i.get('CreditNoteID'))

    dictionary['CreditNoteNumber'].append(i.get('CreditNoteNumber'))
    dictionary['Type'].append(i.get('Type'))
    dictionary['RemainingCredit' ].append(i.get('RemainingCredit'))
    dictionary['ContactName' ].append(i.get('ContactName'))
    dictionary['Date' ].append(checker(i.get('DateString')))
    dictionary['Status' ].append(i.get('Status'))
    dictionary['LineAmountTypes' ].append(i.get('LineAmountTypes'))
    dictionary['Description' ].append(i['LineItems'][0].get('Description'))
    dictionary['AccountCode' ].append(i['LineItems'][0].get('AccountCode'))
    dictionary['UnitAmount' ].append(i['LineItems'][0].get('UnitAmount'))
    dictionary['Quantity' ].append(i['LineItems'][0].get('Quantity'))
    dictionary['SubTotal' ].append(i.get('SubTotal'))
    dictionary['TotalTax' ].append(i.get('TotalTax'))
    dictionary['Total' ].append(i.get('Total'))
    dictionary['CreditNoteID'].append(i.get('CreditNoteID'))

  print(dictionary)
  df = pd.DataFrame(dictionary)
  #df.to_csv(r'E:\Jaz\Folder\creditnotesnew_new.csv',index=False)
  df.to_csv(os.path.join(MAIN_PATH,'pythonCollection','creditnotes_new.csv'),index=False)
  return df

def date_changer(any_date):
  date = any_date.split()
  print(date)
  day = date[0]
  month = date[1]
  year = date[2]


  DICTIONARY = {
      'JANUARY' : '01',
      'FEBRUARY' : '02',
      'MARCH' : '03',
      'APRIL' : '04',
      'MAY' : '05',
      'JUNE':'06',
      'JULY': '07',
      'AUGUST': '08',
      'SEPTEMBER': '09',
      'OCTOBER': '10',
      'NOVEMBER': '11',
      'DECEMBER': '12'
  }

  month = DICTIONARY[month]

  if int(day) in [1,2,3,4,5,6,7,8,9]:
    day = str(0) + str(day)

  print(' '.join([day,month,year]))
  return '-'.join([day,month,year])

import time
import json

def XeroRequestsBoth():

  #####DATE_INPUT######
  #df = pd.read_csv('E:/Jaz/Folder/output.csv')
  print(os.path.join(MAIN_PATH,'pythonCollection','output.csv'))
  df = pd.read_csv(os.path.join(MAIN_PATH,'pythonCollection','output.csv'))
  
  #C:\Users\PHMAdmin\Desktop\JatinFinalApp\ReviewComposerV2\pythonCollection\output.csv
  print(df)
  print(df.iloc[-1]['Expenditure'])
  end_date = date_changer(df.iloc[-1]['Expenditure'])
  start_date = date_changer(df.iloc[-2]['Expenditure'])
  company_name = df.iloc[-3]['Expenditure']


  ################################~~~~DO_NOT_CHANGE~~~#########################################

  #old_refresh_token = open('E:/Jaz/Folder/refresh_token.txt', 'r').read()
  old_refresh_token = open(os.path.join(MAIN_PATH,'pythonCollection','refresh_token.txt'), 'r').read()

  new_tokens = XeroRefreshToken(old_refresh_token)

  print('----------------------------------------------------------------------------')
  print(XeroTenants(new_tokens[0]))

  dictionary = XeroTenants(new_tokens[0])
  print(dictionary)
  for i in list(dictionary.keys()):

    print(f"{i} ----- {dictionary[i]}")


  #tenant_no = int(input('Enter the Organisation Number you want to connect to:- '))

  xero_tenant_id = dictionary[company_name.lower()]

  ###############################~~~DO_NOT_CHANGE~~~#########################################

  XeroAccountCodesRequest(new_tokens[0],xero_tenant_id)
  AccountCodeFiler()

  RESPONSES_INVOICES = []
  RESPONSES_TRANSACTIONS = []
  RESPONSES_OVERPAYMENTS = []
  RESPONSES_JOURNALS = []
  RESPONSES_PREPAYMENTS = []
  RESPONSES_PURCHASEORDERS = []
  RESPONSES_CREDITNOTES = []

  print(start_date, end_date)
  #start_date = input('Please enter the start date in yyyy-mm-dd format (dashes Included): ')
  start_date = start_date.split('-')
  #end_date = input('Please enter the end date in yyyy-mm-dd format (dashes Included): ')
  end_date = end_date.split('-')
  page_no_inv = 1
  page_no_trans = 1
  page_no_over = 1
  page_no_journ = 1
  page_no_prepay = 1
  page_no_purchaseorder = 1
  page_no_creditnotes = 1

  
  #URL for
  #1.) Invoices
  get_url_invoices = f'https://api.xero.com/api.xro/2.0/Invoices?page={page_no_inv}&where=Date>=DateTime({start_date[2]}, {start_date[1]}, {start_date[0]}) and Date<=DateTime({end_date[2]}, {end_date[1]}, {end_date[0]})'

  #2.) Transactions
  get_url_transactions = f'https://api.xero.com/api.xro/2.0/BankTransactions?page={page_no_trans}&where=Date>=DateTime({start_date[2]}, {start_date[1]}, {start_date[0]}) and Date<=DateTime({end_date[2]}, {end_date[1]}, {end_date[0]})'

  #3.) OverPayments
  get_url_overpayments = f'https://api.xero.com/api.xro/2.0/Overpayments?page={page_no_over}&where=Date>=DateTime({start_date[2]}, {start_date[1]}, {start_date[0]}) and Date<=DateTime({end_date[2]}, {end_date[1]}, {end_date[0]})'

  #4.) ManualJournals
  get_url_journals = f'https://api.xero.com/api.xro/2.0/ManualJournals?page={page_no_journ}&where=Date>=DateTime({start_date[2]}, {start_date[1]}, {start_date[0]}) and Date<=DateTime({end_date[2]}, {end_date[1]}, {end_date[0]})'

  #5.) PrePayments
  get_url_prepayments = f'https://api.xero.com/api.xro/2.0/Prepayments?page={page_no_prepay}&where=Date>=DateTime({start_date[2]}, {start_date[1]}, {start_date[0]}) and Date<=DateTime({end_date[2]}, {end_date[1]}, {end_date[0]})'

  #6.) PurchaseOrders
  get_url_purchaseorders = f'https://api.xero.com/api.xro/2.0/PurchaseOrders?page={page_no_purchaseorder}&where=Date>=DateTime({start_date[2]}, {start_date[1]}, {start_date[0]}) and Date<=DateTime({end_date[2]}, {end_date[1]}, {end_date[0]})'

  #7.) CreditNotes
  get_url_creditnotes = f'https://api.xero.com/api.xro/2.0/CreditNotes?page={page_no_creditnotes}&where=Date>=DateTime({start_date[2]}, {start_date[1]}, {start_date[0]}) and Date<=DateTime({end_date[2]}, {end_date[1]}, {end_date[0]})'




   ##################################------------FIRST_PASS-----------##################################################

   #Collecting the response for:-
  #1.) Invoice
  response_invoice = requests.get(get_url_invoices,
                         headers = {
                              'Authorization': 'Bearer ' + new_tokens[0],
                             'Xero-tenant-id': xero_tenant_id,
                             'Accept': 'application/json'
                         })
  #2.) Transactions
  response_transactions = requests.get(get_url_transactions,
                         headers = {
                              'Authorization': 'Bearer ' + new_tokens[0],
                             'Xero-tenant-id': xero_tenant_id,
                             'Accept': 'application/json'
                         })

  #3.) Overpayments
  response_overpayments = requests.get(get_url_overpayments,
                         headers = {
                              'Authorization': 'Bearer ' + new_tokens[0],
                             'Xero-tenant-id': xero_tenant_id,
                             'Accept': 'application/json'
                         })

  #4.) ManualJournal
  response_journals = requests.get(get_url_journals,
                         headers = {
                              'Authorization': 'Bearer ' + new_tokens[0],
                             'Xero-tenant-id': xero_tenant_id,
                             'Accept': 'application/json'
                         })

  #5.) PrePaymants
  response_prepayments = requests.get(get_url_prepayments,
                         headers = {
                              'Authorization': 'Bearer ' + new_tokens[0],
                             'Xero-tenant-id': xero_tenant_id,
                             'Accept': 'application/json'
                         })

  #6.) PurchaseOrders
  response_purchaseorders = requests.get(get_url_purchaseorders,
                         headers = {
                              'Authorization': 'Bearer ' + new_tokens[0],
                             'Xero-tenant-id': xero_tenant_id,
                             'Accept': 'application/json'
                         })

  #7.) CreditNotes
  response_creditnotes = requests.get(get_url_creditnotes,
                         headers = {
                              'Authorization': 'Bearer ' + new_tokens[0],
                             'Xero-tenant-id': xero_tenant_id,
                             'Accept': 'application/json'
                         })

  print(response_invoice.text)
  print(response_transactions.text)
  print(response_overpayments.text)
  print(response_journals.text)
  print(response_prepayments.text)
  print(response_purchaseorders.text)
  print(response_creditnotes.text)
  ##################################------------CONDITIONAL_PASS-----------##################################################

   #collecting the response and turning it into for printing puposes
  #1.) Invoice
  json_response_invoice = response_invoice.json()
  print(json_response_invoice)
  #2.) Transactions
  json_response_transactions = response_transactions.json()
  print(json_response_transactions)
  #3.) Overpayments
  json_response_overpayments = response_overpayments.json()
  print(json_response_overpayments)
  #4.) ManualJournals
  json_response_journals = response_journals.json()
  print(json_response_journals)
  #5.) Prepayments
  json_response_prepayments = response_prepayments.json()
  print(json_response_prepayments)
  #6.) PurchaseOrders
  json_response_purchaseorders = response_purchaseorders.json()
  print(json_response_purchaseorders)
  #7.) CreditNotes
  json_response_creditnotes = response_creditnotes.json()
  print(json_response_creditnotes)


  RESPONSES_INVOICES = json_response_invoice['Invoices']
  RESPONSES_TRANSACTIONS = json_response_transactions['BankTransactions']
  RESPONSES_OVERPAYMENTS = json_response_overpayments['Overpayments']
  RESPONSES_JOURNALS = json_response_journals['ManualJournals']
  RESPONSES_PREPAYMENTS = json_response_prepayments['Prepayments']
  RESPONSES_PURCHASEORDERS = json_response_purchaseorders['PurchaseOrders']
  RESPONSES_CREDITNOTES = json_response_creditnotes['CreditNotes']

  print(f"Invoices :- {len(json_response_invoice['Invoices'])}")
  print(f"BankTransactions :- {len(json_response_transactions['BankTransactions'])}")
  print(f"Overpayments :- {len(json_response_overpayments['Overpayments'])}")
  print(f"ManualJournals :- {len(json_response_journals['ManualJournals'])}")
  print(f"Prepayments :- {len(json_response_prepayments['Prepayments'])}")
  print(f"PurchaseOrders :- {len(json_response_purchaseorders['PurchaseOrders'])}")
  print(f"CreditNotes :- {len(json_response_creditnotes['CreditNotes'])}")





  #URL for
  #1.) Invoices

  count = 1
  print(count)

  while len(json_response_invoice['Invoices']) == 100:
    get_url_invoices = f'https://api.xero.com/api.xro/2.0/Invoices?page={page_no_inv}&where=Date>=DateTime({start_date[2]}, {start_date[1]}, {start_date[0]}) and Date<=DateTime({end_date[2]}, {end_date[1]}, {end_date[0]})'
    response_invoice = requests.get(get_url_invoices,
                         headers = {
                              'Authorization': 'Bearer ' + new_tokens[0],
                             'Xero-tenant-id': xero_tenant_id,
                             'Accept': 'application/json'
                         })
    json_response_invoice = response_invoice.json()
    RESPONSES_INVOICES = RESPONSES_INVOICES+json_response_invoice['Invoices']
    page_no_inv += 1
    count += 1
    print(count)


  else:
    get_url_invoices = f'https://api.xero.com/api.xro/2.0/Invoices?page={page_no_inv}&where=Date>=DateTime({start_date[2]}, {start_date[1]}, {start_date[0]}) and Date<=DateTime({end_date[2]}, {end_date[1]}, {end_date[0]})'
    response_invoice = requests.get(get_url_invoices,
                         headers = {
                              'Authorization': 'Bearer ' + new_tokens[0],
                             'Xero-tenant-id': xero_tenant_id,
                             'Accept': 'application/json'
                         })
    json_response_invoice = response_invoice.json()
    RESPONSES_INVOICES = RESPONSES_INVOICES+json_response_invoice['Invoices']
    page_no_inv += 1
    count += 1
    print(count)


  #2. )Bank Transactions

  count = 1
  print(count)

  while len(json_response_transactions['BankTransactions']) == 100:

    get_url_transactions = f'https://api.xero.com/api.xro/2.0/BankTransactions?page={page_no_trans}&where=Date>=DateTime({start_date[2]}, {start_date[1]}, {start_date[0]}) and Date<=DateTime({end_date[2]}, {end_date[1]}, {end_date[0]})'
    response_transactions = requests.get(get_url_transactions,
                         headers = {
                              'Authorization': 'Bearer ' + new_tokens[0],
                             'Xero-tenant-id': xero_tenant_id,
                             'Accept': 'application/json'
                         })
    json_response_transactions = response_transactions.json()
    RESPONSES_TRANSACTIONS = RESPONSES_TRANSACTIONS+json_response_transactions['BankTransactions']
    page_no_trans += 1
    count += 1
    print(count)

  else:
    get_url_transactions = f'https://api.xero.com/api.xro/2.0/BankTransactions?page={page_no_trans}&where=Date>=DateTime({start_date[2]}, {start_date[1]}, {start_date[0]}) and Date<=DateTime({end_date[2]}, {end_date[1]}, {end_date[0]})'
    response_transactions = requests.get(get_url_transactions,
                         headers = {
                              'Authorization': 'Bearer ' + new_tokens[0],
                             'Xero-tenant-id': xero_tenant_id,
                             'Accept': 'application/json'
                         })
    json_response_transactions = response_transactions.json()
    RESPONSES_TRANSACTIONS = RESPONSES_TRANSACTIONS+json_response_transactions['BankTransactions']
    page_no_trans += 1
    count += 1
    print(count)



  #3. )Over Payments

  count = 1
  print(count)

  while len(json_response_overpayments['Overpayments']) == 100:

    get_url_overpayments = f'https://api.xero.com/api.xro/2.0/Overpayments?page={page_no_over}&where=Date>=DateTime({start_date[2]}, {start_date[1]}, {start_date[0]}) and Date<=DateTime({end_date[2]}, {end_date[1]}, {end_date[0]})'
    response_overpayments = requests.get(get_url_overpayments,
                         headers = {
                              'Authorization': 'Bearer ' + new_tokens[0],
                             'Xero-tenant-id': xero_tenant_id,
                             'Accept': 'application/json'
                         })
    json_response_overpayments = response_overpayments.json()
    RESPONSES_OVERPAYMENTS = RESPONSES_OVERPAYMENTS+json_response_overpayments['Overpayments']
    page_no_over += 1
    count += 1
    print(count)

  else:
    get_url_overpayments = f'https://api.xero.com/api.xro/2.0/Overpayments?page={page_no_over}&where=Date>=DateTime({start_date[2]}, {start_date[1]}, {start_date[0]}) and Date<=DateTime({end_date[2]}, {end_date[1]}, {end_date[0]})'
    response_overpayments = requests.get(get_url_overpayments,
                         headers = {
                              'Authorization': 'Bearer ' + new_tokens[0],
                             'Xero-tenant-id': xero_tenant_id,
                             'Accept': 'application/json'
                         })
    json_response_overpayments = response_overpayments.json()
    RESPONSES_OVERPAYMENTS = RESPONSES_OVERPAYMENTS+json_response_overpayments['Overpayments']
    page_no_over += 1
    count += 1
    print(count)

  #4. )Manual Journals

  count = 1
  print(count)

  while len(json_response_journals['ManualJournals']) == 100:

    get_url_journals = f'https://api.xero.com/api.xro/2.0/ManualJournals?page={page_no_journ}&where=Date>=DateTime({start_date[2]}, {start_date[1]}, {start_date[0]}) and Date<=DateTime({end_date[2]}, {end_date[1]}, {end_date[0]})'
    response_journals = requests.get(get_url_journals,
                         headers = {
                              'Authorization': 'Bearer ' + new_tokens[0],
                             'Xero-tenant-id': xero_tenant_id,
                             'Accept': 'application/json'
                         })
    json_response_journals = response_journals.json()
    RESPONSES_JOURNALS = RESPONSES_JOURNALS+json_response_journals['ManualJournals']
    page_no_journ += 1
    count += 1
    print(count)

  else:
    get_url_journals = f'https://api.xero.com/api.xro/2.0/ManualJournals?page={page_no_journ}&where=Date>=DateTime({start_date[2]}, {start_date[1]}, {start_date[0]}) and Date<=DateTime({end_date[2]}, {end_date[1]}, {end_date[0]})'
    response_journals = requests.get(get_url_journals,
                         headers = {
                              'Authorization': 'Bearer ' + new_tokens[0],
                             'Xero-tenant-id': xero_tenant_id,
                             'Accept': 'application/json'
                         })
    json_response_journals = response_journals.json()
    RESPONSES_JOURNALS = RESPONSES_JOURNALS+json_response_journals['ManualJournals']
    page_no_journ += 1
    count += 1
    print(count)


  #5. )Prepayments

  count = 1
  print(count)

  while len(json_response_prepayments['Prepayments']) == 100:

    get_url_prepayments = f'https://api.xero.com/api.xro/2.0/Prepayments?page={page_no_prepay}&where=Date>=DateTime({start_date[2]}, {start_date[1]}, {start_date[0]}) and Date<=DateTime({end_date[2]}, {end_date[1]}, {end_date[0]})'
    response_prepayments = requests.get(get_url_prepayments,
                         headers = {
                              'Authorization': 'Bearer ' + new_tokens[0],
                             'Xero-tenant-id': xero_tenant_id,
                             'Accept': 'application/json'
                         })
    json_response_prepayments = response_prepayments.json()
    RESPONSES_PREPAYMENTS = RESPONSES_PREPAYMENTS+json_response_prepayments['Prepayments']
    page_no_prepay += 1
    count += 1
    print(count)

  else:

    get_url_prepayments = f'https://api.xero.com/api.xro/2.0/Prepayments?page={page_no_prepay}&where=Date>=DateTime({start_date[2]}, {start_date[1]}, {start_date[0]}) and Date<=DateTime({end_date[2]}, {end_date[1]}, {end_date[0]})'
    response_prepayments = requests.get(get_url_prepayments,
                         headers = {
                              'Authorization': 'Bearer ' + new_tokens[0],
                             'Xero-tenant-id': xero_tenant_id,
                             'Accept': 'application/json'
                         })
    json_response_prepayments = response_prepayments.json()
    RESPONSES_PREPAYMENTS = RESPONSES_PREPAYMENTS+json_response_prepayments['Prepayments']
    page_no_prepay += 1
    count += 1
    print(count)

  #6. )PurchaseOrders

  count = 1
  print(count)

  while len(json_response_purchaseorders['PurchaseOrders']) == 100:

    get_url_purchaseorders = f'https://api.xero.com/api.xro/2.0/PurchaseOrders?page={page_no_purchaseorder}&where=Date>=DateTime({start_date[2]}, {start_date[1]}, {start_date[0]}) and Date<=DateTime({end_date[2]}, {end_date[1]}, {end_date[0]})'
    response_purchaseorders = requests.get(get_url_purchaseorders,
                         headers = {
                              'Authorization': 'Bearer ' + new_tokens[0],
                             'Xero-tenant-id': xero_tenant_id,
                             'Accept': 'application/json'
                         })
    json_response_purchaseorders = response_purchaseorders.json()
    RESPONSES_PURCHASEORDERS = RESPONSES_PURCHASEORDERS+json_response_purchaseorders['PurchaseOrders']
    page_no_purchaseorder += 1
    count += 1
    print(count)

  else:

    get_url_purchaseorders = f'https://api.xero.com/api.xro/2.0/PurchaseOrders?page={page_no_purchaseorder}&where=Date>=DateTime({start_date[2]}, {start_date[1]}, {start_date[0]}) and Date<=DateTime({end_date[2]}, {end_date[1]}, {end_date[0]})'
    response_purchaseorders = requests.get(get_url_purchaseorders,
                         headers = {
                              'Authorization': 'Bearer ' + new_tokens[0],
                             'Xero-tenant-id': xero_tenant_id,
                             'Accept': 'application/json'
                         })
    json_response_purchaseorders = response_purchaseorders.json()
    RESPONSES_PURCHASEORDERS = RESPONSES_PURCHASEORDERS+json_response_purchaseorders['PurchaseOrders']
    page_no_purchaseorder += 1
    count += 1
    print(count)


  #7. )CreditNotes

  count = 1
  print(count)

  while len(json_response_creditnotes['CreditNotes']) == 100:

    get_url_creditnotes = f'https://api.xero.com/api.xro/2.0/CreditNotes?page={page_no_creditnotes}&where=Date>=DateTime({start_date[2]}, {start_date[1]}, {start_date[0]}) and Date<=DateTime({end_date[2]}, {end_date[1]}, {end_date[0]})'
    response_creditnotes = requests.get(get_url_creditnotes,
                         headers = {
                              'Authorization': 'Bearer ' + new_tokens[0],
                             'Xero-tenant-id': xero_tenant_id,
                             'Accept': 'application/json'
                         })
    json_response_creditnotes = response_creditnotes.json()
    RESPONSES_CREDITNOTES = RESPONSES_CREDITNOTES+json_response_creditnotes['CreditNotes']
    page_no_creditnotes += 1
    count += 1
    print(count)

  else:

    get_url_creditnotes = f'https://api.xero.com/api.xro/2.0/CreditNotes?page={page_no_creditnotes}&where=Date>=DateTime({start_date[2]}, {start_date[1]}, {start_date[0]}) and Date<=DateTime({end_date[2]}, {end_date[1]}, {end_date[0]})'
    response_creditnotes = requests.get(get_url_creditnotes,
                         headers = {
                              'Authorization': 'Bearer ' + new_tokens[0],
                             'Xero-tenant-id': xero_tenant_id,
                             'Accept': 'application/json'
                         })
    json_response_creditnotes = response_creditnotes.json()
    RESPONSES_CREDITNOTES = RESPONSES_CREDITNOTES+json_response_creditnotes['CreditNotes']
    page_no_creditnotes += 1
    count += 1
    print(count)

  #writing the invoices into the appropriate file:-
  #xero_output_invoice = open('E:/Jaz/Folder/xero_output_invoices.txt', 'w')
  xero_output_invoice = open(os.path.join(MAIN_PATH,'pythonCollection','xero_output_invoices.txt'), 'w')
  xero_output_invoice.write(response_invoice.text)
  xero_output_invoice.close()

  #writing the transactions to the appropriate file:-
  #xero_output_transactions = open('E:/Jaz/folder/xero_output.txt', 'w')
  xero_output_transactions = open(os.path.join(MAIN_PATH,'pythonCollection','xero_output.txt'), 'w')
  xero_output_transactions.write(response_transactions.text)
  xero_output_transactions.close()

  #writing the overpayments to the appropriate file:-
  #xero_output_overpayments = open('E:/Jaz/folder/xero_output_overpayments.txt', 'w')
  xero_output_overpayments = open(os.path.join(MAIN_PATH,'pythonCollection','xero_output_overpayments.txt'), 'w')
  xero_output_overpayments.write(response_overpayments.text)
  xero_output_overpayments.close()

  #writing the journals to the appropriate file:-
  #xero_output_journals = open('E:/Jaz/folder/xero_output_journals.txt', 'w')
  xero_output_journals = open(os.path.join(MAIN_PATH,'pythonCollection','xero_output_journals.txt'), 'w')
  xero_output_journals.write(response_journals.text)
  xero_output_journals.close()

  #writing the prepaymets to the appropriate file:-
  #xero_output_prepayments = open('E:/Jaz/folder/xero_output_prepayments.txt', 'w')
  xero_output_prepayments = open(os.path.join(MAIN_PATH,'pythonCollection','xero_output_prepayments.txt'), 'w')
  xero_output_prepayments.write(response_prepayments.text)
  xero_output_prepayments.close()

  #writing the purchaseorders to the appropriate file:-
  #xero_output_purchaseorders = open('E:/Jaz/folder/xero_output_purchaseorders.txt', 'w')
  xero_output_purchaseorders = open(os.path.join(MAIN_PATH,'pythonCollection','xero_output_purchaseorders.txt'), 'w')
  xero_output_purchaseorders.write(response_purchaseorders.text)
  xero_output_purchaseorders.close()

  #writing the creditnotes to the appropriate file:-
  #xero_output_creditnotes = open('E:/Jaz/folder/xero_output_creditnotes.txt', 'w')
  xero_output_creditnotes = open(os.path.join(MAIN_PATH,'pythonCollection','xero_output_creditnotes.txt'), 'w')
  xero_output_creditnotes.write(response_creditnotes.text)
  xero_output_creditnotes.close()

  jsonToInvoiceDF(RESPONSES_INVOICES)
  jsonToTransactionDF(RESPONSES_TRANSACTIONS)
  jsonToOverpaymentDF(RESPONSES_OVERPAYMENTS)
  jsonToJournalDF(RESPONSES_JOURNALS)
  jsonToPrepaymentDF(RESPONSES_PREPAYMENTS)
  jsonToPurchaseOrderDF(RESPONSES_PURCHASEORDERS)
  jsonToCreditNoteDF(RESPONSES_CREDITNOTES)

  return RESPONSES_INVOICES, RESPONSES_TRANSACTIONS, RESPONSES_OVERPAYMENTS, RESPONSES_JOURNALS, RESPONSES_PREPAYMENTS, RESPONSES_PURCHASEORDERS, RESPONSES_CREDITNOTES

r_inv, r_trans, r_over, r_journ, r_pre, r_pord, r_cred = XeroRequestsBoth()