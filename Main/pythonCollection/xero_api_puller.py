# -*- coding: utf-8 -*-
"""Copy of Copy of newFunctionality.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Z0Emn7RIk_PY_CPaGGuw28Pa8qyMymDV

## Basic import and intialisations
"""

import json
import requests
import webbrowser
import base64
import pandas as pd


client_id = 'D11475FD8E774BD5852416175C793774'
client_secret = 'a1_hYGOtI086OiSzeMr7hbsbm35sau4IQJOzsteBVQIUZnoS'
redirect_url = 'https://www.phm-accountants.co.uk/'
scope = 'offline_access openid accounting.settings accounting.transactions accounting.reports.read'
#scope = 'offline_access accounting.transactions'
b64_id_secret = base64.b64encode(bytes(client_id + ':' + client_secret, 'utf-8')).decode('utf-8')

"""## Standard Auth Functions

"""

def XeroFirstAuth():
    # 1. Send a user to authorize your app
    auth_url = ('''https://login.xero.com/identity/connect/authorize?''' +
                '''response_type=code''' +
                '''&client_id=''' + client_id +
                '''&redirect_uri=''' + redirect_url +
                '''&scope=''' + scope +
                '''&state=123''')

    webbrowser.open_new(auth_url)
    #webbrowser.get(chrome_path).open(auth_url)
    #print('@@@@@@@@@@@@@@@@@')
    #print(webbrowser.get(chrome_path),'jajaja')
    #print('@@@@@@@@@@@@@@@@@')

    # 2. Users are redirected back to you with a code
    auth_res_url = input('What is the response URL? ')
    start_number = auth_res_url.find('code=') + len('code=')
    end_number = auth_res_url.find('&scope')
    auth_code = auth_res_url[start_number:end_number]
    print(auth_code)
    print('\n')



    # 3. Exchange the code
    exchange_code_url = 'https://identity.xero.com/connect/token'
    response = requests.post(exchange_code_url,
                            headers = {
                                'Authorization': 'Basic ' + b64_id_secret
                            },
                            data = {
                                'grant_type': 'authorization_code',
                                'code': auth_code,
                                'redirect_uri': redirect_url
                            })
    json_response = response.json()
    print(json_response)
    print('\n')

    # 4. Receive your tokens
    return [json_response['access_token'], json_response['refresh_token']]

def XeroTenants(access_token):
    connections_url = 'https://api.xero.com/connections'
    response = requests.get(connections_url,
                           headers = {
                               'Authorization': 'Bearer ' + access_token,
                               'Content-Type': 'application/json'
                           })
    json_response = response.json()
    print(json_response)
    print("That was The Tenant Function")

    tenant_dict = {}

    for organisation_no in range(len(json_response)):
      #print(f"{organisation_no} :: {json_response[organisation_no]['tenantId']} :: {json_response[organisation_no]['tenantName']}")
      tenant_dict[json_response[organisation_no]['tenantName'].lower()] = json_response[organisation_no]['tenantId']
    return tenant_dict

def XeroRefreshToken(refresh_token):
    token_refresh_url = 'https://identity.xero.com/connect/token'
    response = requests.post(token_refresh_url,
                            headers = {
                                'Authorization' : 'Basic ' + b64_id_secret,
                                'Content-Type': 'application/x-www-form-urlencoded'
                            },
                            data = {
                                'grant_type' : 'refresh_token',
                                'refresh_token' : refresh_token
                            })
    json_response = response.json()
    print(json_response)

    new_refresh_token = json_response['refresh_token']
    #rt_file = open('C:/Folder/refresh_token.txt', 'w')
    rt_file = open('C:/Folder/refresh_token.txt', 'w')
    rt_file.write(new_refresh_token)
    rt_file.close()

    return [json_response['access_token'], json_response['refresh_token']]

"""## Specailsed Account Codes Functions"""

def XeroAccountCodesRequest(ACC_TOKEN,xero_tenant_id):

    get_url = 'https://api.xero.com/api.xro/2.0/Accounts'
    response = requests.get(get_url,
                           headers = {
                               'Authorization': 'Bearer ' + ACC_TOKEN,
                               'Xero-tenant-id': xero_tenant_id,
                               'Accept': 'application/json'
                           })
    json_response = response.json()
    print(json_response)

    #xero_output = open('C:/Folder/xero_output_account_codes.txt', 'w')
    xero_output = open('C:/Folder/xero_output_account_codes.txt', 'w')
    xero_output.write(response.text)
    xero_output.close()

def AccountCodeFiler():
  #open the files to read about the dictinary
  #with open('C:/Folder/xero_output_account_codes.txt','r') as accFile:
  with open('C:/Folder/xero_output_account_codes.txt','r') as accFile:

    content = accFile.read()

  format = json.loads(content)
  #make Account codes dictionary
  acc_codes = {}
  for i in format['Accounts']:
    print(f"{i.get('Code')} :: {i.get('Name')}")
    acc_codes[i.get('Code')] = i.get('Name')
  #Export the codes out a csv
  df = pd.DataFrame({'Codes': acc_codes.keys(),
                   'Name':acc_codes.values()})
  #df.to_csv('C:/Folder/xero_output_account_codes.csv',index=False)
  df.to_csv('C:/Folder/xero_output_account_codes.csv',index=False)

"""## Specialised Invoices Functions

## Specialised Bank Transaction functions
"""

def jsonToInvoiceDF(r_inv):
  dictionary = {
      'AccountCode':[],
      'Description':[],
      'SubTotal':[],
      'TotalTax':[],
      'TotalAmount':[],
      'Date':[],
      'DueDate':[],
      'Status':[],
      'Type':[],
      'CurrencyCode':[],
      'InvoiceID':[]
  }
  for i in r_inv:

    print(i['LineItems'][0].get('AccountCode'))
    print(i['LineItems'][0].get('Description'))
    print(i.get('SubTotal'))
    print(i.get('TotalTax'))
    print(i.get('Total'))
    print(i.get('DateString'))
    print(i.get('DueDateString'))
    print(i.get('Status'))
    print(i.get('Type'))
    print(i.get('CurrencyCode'))
    print(i.get('InvoiceID'))

    dictionary['AccountCode'].append(i['LineItems'][0].get('AccountCode'))
    dictionary['Description'].append(i['LineItems'][0].get('Description'))
    dictionary['SubTotal'].append(i.get('SubTotal'))
    dictionary['TotalTax'].append(i.get('TotalTax'))
    dictionary['TotalAmount'].append(i.get('Total'))
    dictionary['Date'].append(i.get('DateString').split('T')[0])
    dictionary['DueDate'].append(i.get('DueDateString').split('T')[0])
    dictionary['Status'].append(i.get('Status'))
    dictionary['Type'].append(i.get('Type'))
    dictionary['CurrencyCode'].append(i.get('CurrencyCode'))
    dictionary['InvoiceID'].append(i.get('InvoiceID'))

  df = pd.DataFrame(dictionary)
  df.to_csv('C:\Folder\invoice_new.csv',index=False)
  return df

def jsonToTransactionDF(r_trans):
  dictionary = {
      'AccountCode':[],
      'Description':[],
      'SubTotal':[],
      'TotalTax':[],
      'TotalAmount':[],
      'Date':[],
      'AccountID':[],
      'AccountName':[],
      'Type':[],
      'CurrencyCode':[],
      'Status':[],
      'TransactionID':[]
  }
  for i in r_trans:
    print(i['LineItems'][0].get('AccountCode'))
    print(i['LineItems'][0].get('Description'))
    print(i.get('SubTotal'))
    print(i.get('TotalTax'))
    print(i.get('Amount'))
    print(i.get('DateString'))
    print(i['BankAccount'].get('AccountID'))
    print(i['BankAccount'].get('Name'))
    print(i.get('Type'))
    print(i.get('CurrencyCode'))
    print(i.get('Status'))
    print(i.get('TransactionID'))

    dictionary['AccountCode'].append(i['LineItems'][0].get('AccountCode'))
    dictionary['Description'].append(i['LineItems'][0].get('Description'))
    dictionary['SubTotal'].append(i.get('SubTotal'))
    dictionary['TotalTax'].append(i.get('TotalTax'))
    dictionary['TotalAmount'].append(i.get('Total'))
    dictionary['Date'].append(i.get('DateString').split('T')[0])
    dictionary['AccountID'].append(i['BankAccount'].get('AccountID'))
    dictionary['AccountName'].append(i.get('Status'))
    dictionary['Type'].append(i.get('Type'))
    dictionary['CurrencyCode'].append(i.get('CurrencyCode'))
    dictionary['Status'].append(i.get('Status'))
    dictionary['TransactionID'].append(i.get('BankTransactionID'))

  df = pd.DataFrame(dictionary)
  df.to_csv(r'C:\Folder\transaction_new.csv',index=False)
  return df

def date_changer(any_date):
  date = any_date.split()
  day = date[0]
  month = date[1]
  year = date[2]

  DICTIONARY = {
      'JANUARY' : '01',
      'FEBRUARY' : '02',
      'MARCH' : '03',
      'APRIL' : '04',
      'MAY' : '05',
      'JUNE':'06',
      'JULY': '07',
      'AUGUST': '08',
      'SEPTEMBER': '09',
      'OCTOBER': '10',
      'NOVEMBER': '11',
      'DECEMBER': '12'
  }

  month = DICTIONARY[month]

  if int(day) in [1,2,3,4,5,6,7,8,9]:
    day = str(0) + str(day)

  print(' '.join([day,month,year]))
  return '-'.join([day,month,year])

import time
import json

def XeroRequestsBoth():

  #####DATE_INPUT######
  df = pd.read_csv('C:/Folder/output.csv')
  end_date = date_changer(df.iloc[-1]['Expenditure'])
  start_date = date_changer(df.iloc[-2]['Expenditure'])
  company_name = df.iloc[-3]['Expenditure']


  ################################~~~~DO_NOT_CHANGE~~~#########################################

  #old_refresh_token = open('C:/Folder/refresh_token.txt', 'r').read()

  old_refresh_token = open('C:/Folder/refresh_token.txt', 'r').read()

  new_tokens = XeroRefreshToken(old_refresh_token)

  print('----------------------------------------------------------------------------')
  print(XeroTenants(new_tokens[0]))

  dictionary = XeroTenants(new_tokens[0])
  print(dictionary)
  for i in list(dictionary.keys()):

    print(f"{i} ----- {dictionary[i]}")


  #tenant_no = int(input('Enter the Organisation Number you want to connect to:- '))

  xero_tenant_id = dictionary[company_name.lower()]

  ###############################~~~DO_NOT_CHANGE~~~#########################################

  XeroAccountCodesRequest(new_tokens[0],xero_tenant_id)
  AccountCodeFiler()

  RESPONSES_INVOICES = []
  RESPONSES_TRANSACTIONS = []




  #start_date = input('Please enter the start date in yyyy-mm-dd format (dashes Included): ')
  start_date = start_date.split('-')
  #end_date = input('Please enter the end date in yyyy-mm-dd format (dashes Included): ')
  end_date = end_date.split('-')
  page_no_inv = 1
  page_no_trans = 1

  #URL for
  #1.) Invoices
  get_url_invoices = f'https://api.xero.com/api.xro/2.0/Invoices?page={page_no_inv}&where=Date>=DateTime({start_date[2]}, {start_date[1]}, {start_date[0]}) and Date<=DateTime({end_date[2]}, {end_date[1]}, {end_date[0]})'

   #2.) Transactions
  get_url_transactions = f'https://api.xero.com/api.xro/2.0/BankTransactions?page={page_no_trans}&where=Date>=DateTime({start_date[2]}, {start_date[1]}, {start_date[0]}) and Date<=DateTime({end_date[2]}, {end_date[1]}, {end_date[0]})'

   ##################################------------FIRST_PASS-----------##################################################

   #Collecting the response for:-
  #1.) Invoice
  response_invoice = requests.get(get_url_invoices,
                         headers = {
                              'Authorization': 'Bearer ' + new_tokens[0],
                             'Xero-tenant-id': xero_tenant_id,
                             'Accept': 'application/json'
                         })
  #1.) Transactions
  response_transactions = requests.get(get_url_transactions,
                         headers = {
                              'Authorization': 'Bearer ' + new_tokens[0],
                             'Xero-tenant-id': xero_tenant_id,
                             'Accept': 'application/json'
                         })
  print(response_invoice.text)
  print(response_transactions.text)
  ##################################------------CONDITIONAL_PASS-----------##################################################

   #collecting the response and turning it into for printing puposes
  #1.) Invoice
  json_response_invoice = response_invoice.json()
  print(json_response_invoice)
  #2.) Transactions
  json_response_transactions = response_transactions.json()
  print(json_response_transactions)

  RESPONSES_INVOICES = json_response_invoice['Invoices']
  RESPONSES_TRANSACTIONS = json_response_transactions['BankTransactions']

  print(len(json_response_invoice['Invoices']))
  print(len(json_response_transactions['BankTransactions']))




  count = 1
  print(count)
  while len(json_response_invoice['Invoices']) == 100:

  #URL for
  #1.) Invoices
    get_url_invoices = f'https://api.xero.com/api.xro/2.0/Invoices?page={page_no_inv}&where=Date>=DateTime({start_date[2]}, {start_date[1]}, {start_date[0]}) and Date<=DateTime({end_date[2]}, {end_date[1]}, {end_date[0]})'
    response_invoice = requests.get(get_url_invoices,
                         headers = {
                              'Authorization': 'Bearer ' + new_tokens[0],
                             'Xero-tenant-id': xero_tenant_id,
                             'Accept': 'application/json'
                         })
    json_response_invoice = response_invoice.json()
    RESPONSES_INVOICES = RESPONSES_INVOICES+json_response_invoice['Invoices']
    page_no_inv += 1
    count += 1
    print(count)


  else:
    get_url_invoices = f'https://api.xero.com/api.xro/2.0/Invoices?page={page_no_inv}&where=Date>=DateTime({start_date[2]}, {start_date[1]}, {start_date[0]}) and Date<=DateTime({end_date[2]}, {end_date[1]}, {end_date[0]})'
    response_invoice = requests.get(get_url_invoices,
                         headers = {
                              'Authorization': 'Bearer ' + new_tokens[0],
                             'Xero-tenant-id': xero_tenant_id,
                             'Accept': 'application/json'
                         })
    json_response_invoice = response_invoice.json()
    RESPONSES_INVOICES = RESPONSES_INVOICES+json_response_invoice['Invoices']
    page_no_inv += 1
    count += 1
    print(count)

  count = 1
  print(count)


  #2. )Bank Transactions
  while len(json_response_transactions['BankTransactions']) == 100:

    get_url_transactions = f'https://api.xero.com/api.xro/2.0/BankTransactions?page={page_no_trans}&where=Date>=DateTime({start_date[2]}, {start_date[1]}, {start_date[0]}) and Date<=DateTime({end_date[2]}, {end_date[1]}, {end_date[0]})'
    response_transactions = requests.get(get_url_transactions,
                         headers = {
                              'Authorization': 'Bearer ' + new_tokens[0],
                             'Xero-tenant-id': xero_tenant_id,
                             'Accept': 'application/json'
                         })
    json_response_transactions = response_transactions.json()
    RESPONSES_TRANSACTIONS = RESPONSES_TRANSACTIONS+json_response_transactions['BankTransactions']
    page_no_trans += 1
    count += 1
    print(count)

  else:
    get_url_transactions = f'https://api.xero.com/api.xro/2.0/BankTransactions?page={page_no_trans}&where=Date>=DateTime({start_date[2]}, {start_date[1]}, {start_date[0]}) and Date<=DateTime({end_date[2]}, {end_date[1]}, {end_date[0]})'
    response_transactions = requests.get(get_url_transactions,
                         headers = {
                              'Authorization': 'Bearer ' + new_tokens[0],
                             'Xero-tenant-id': xero_tenant_id,
                             'Accept': 'application/json'
                         })
    json_response_transactions = response_transactions.json()
    RESPONSES_TRANSACTIONS = RESPONSES_TRANSACTIONS+json_response_transactions['BankTransactions']
    page_no_trans += 1
    count += 1
    print(count)


   #writing the invoices into the appropriate file:-
  #xero_output_invoice = open('C:/Folder/xero_output_invoices.txt', 'w')
  xero_output_invoice = open('C:/Folder/xero_output_invoices.txt', 'w')
  xero_output_invoice.write(response_invoice.text)
  xero_output_invoice.close()

  #writing the transactions to the appropriate file:-
  #xero_output_transactions = open('C:/folder/xero_output.txt', 'w')
  xero_output_transactions = open('C:/Folder/xero_output.txt', 'w')
  xero_output_transactions.write(response_transactions.text)
  xero_output_transactions.close()

  jsonToInvoiceDF(RESPONSES_INVOICES)
  jsonToTransactionDF(RESPONSES_TRANSACTIONS)

  return RESPONSES_INVOICES, RESPONSES_TRANSACTIONS

r_inv, r_trans = XeroRequestsBoth()

